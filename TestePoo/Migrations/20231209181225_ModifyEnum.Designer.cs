// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestePoo.Data;

#nullable disable

namespace TestePoo.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231209181225_ModifyEnum")]
    partial class ModifyEnum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TestePoo.Models.Lista", b =>
                {
                    b.Property<int>("ListaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_lista");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("ListaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tb_lista");
                });

            modelBuilder.Entity("TestePoo.Models.Tarefa", b =>
                {
                    b.Property<int>("TarefaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tarefa");

                    b.Property<DateTime>("DataLimite")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_final");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<int>("ListaId")
                        .HasColumnType("int")
                        .HasColumnName("id_lista");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TarefaId");

                    b.HasIndex("ListaId");

                    b.ToTable("tb_tarefa");
                });

            modelBuilder.Entity("TestePoo.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.HasKey("UsuarioId");

                    b.ToTable("tb_usuario");
                });

            modelBuilder.Entity("TestePoo.Models.Lista", b =>
                {
                    b.HasOne("TestePoo.Models.Usuario", "Usuario")
                        .WithMany("Listas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TestePoo.Models.Tarefa", b =>
                {
                    b.HasOne("TestePoo.Models.Lista", "Lista")
                        .WithMany("Tarefas")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");
                });

            modelBuilder.Entity("TestePoo.Models.Lista", b =>
                {
                    b.Navigation("Tarefas");
                });

            modelBuilder.Entity("TestePoo.Models.Usuario", b =>
                {
                    b.Navigation("Listas");
                });
#pragma warning restore 612, 618
        }
    }
}
